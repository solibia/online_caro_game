/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projectnetwork;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 *  @author Hau, Loonel, Tho, Sang
 */
public class Server extends javax.swing.JFrame {
    //la taille du tableau
    private int Size = 20;
    //la taille de chaque carré
    private int cellWidth = 25;
    //ce variable déterminer si ce joueur a le droit de jouer
    boolean myturn=true;
    //ce variable déterminer le gagnant
    int playerWin;
    int player1=1,player2=2;
    //cette socket joue le rôle de server
    ServerSocket serverSocket;
    //cette socket est résevé pour attendre le client
    Socket socket=null;
    //ces deux objets pour envoyer et recevoir les message
    ObjectInputStream socketInput;
    ObjectOutputStream socketOutput;
    //icône
    Image imageO;
    Image imageX;
    String imageOName="o.png";
    String imageXName="x.png";
    //objet table, cet objet a pour but de stocker les positions de joueur
    Table table;
    String host="127.0.0.1";
    int port=1233;
    Timer timer;
    int delay = 1000;
    int period = 1000;
    int timeOut = 60;
    /**
     * Creates new form Client
     */
    public Server() {
        //Créer un nouveau tableau pour stocker les positions
        table=new Table(Size, Size);
        initComponents();
        setVisible(true);        
        //affichier les icône
        imageO= Toolkit.getDefaultToolkit().getImage(imageOName);
        imageX=Toolkit.getDefaultToolkit().getImage(imageXName);  
        //créer un nouveau thread pour enttendre les message
        new ListenMessage();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel(){
            public void paintComponent(Graphics g){
                this.setOpaque(false);
                Graphics2D g2 = (Graphics2D) g;
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                //draw line
                g.setColor(Color.GRAY);
                for(int r = 0;r<=Size;r++){
                    g.drawLine(0, r*cellWidth, Size*cellWidth, r*cellWidth);
                }
                for(int c = 0;c<=Size;c++){
                    g.drawLine(c*cellWidth, 0, c*cellWidth, Size*cellWidth);
                }
                //draw chess
                for(int i=0;i<Size;i++){
                    for(int j=0;j<Size;j++){
                        int player=table.getPlayer(i,j);
                        if(player!=0){
                            if(player==1){
                                g.drawImage(imageO, i*cellWidth, j*cellWidth, this);
                            }else{
                                g.drawImage(imageX, i*cellWidth, j*cellWidth, this);
                            }
                        }

                    }
                }
                super.paintComponent(g);
            }
        }
        ;
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jLabel4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MouseClick(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 513, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 504, Short.MAX_VALUE)
        );

        jLabel1.setText("Status:");

        jLabel2.setText("Time rest:");

        jLabel3.setText("Chat box");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterText(evt);
            }
        });

        jButton1.setText("Send message");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendMessage(evt);
            }
        });

        jScrollPane2.setViewportView(jEditorPane1);

        jLabel4.setText("You are server");

        jMenu1.setText("Game");

        jMenuItem3.setText("Reset");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Exit");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel2)
                        .addComponent(jLabel1)
                        .addComponent(jLabel3)
                        .addComponent(jButton1)
                        .addComponent(jTextField1)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE))
                    .addComponent(jLabel4))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Capturer l'événement lorsque l'utilisateur clicke sur l'écran
    private void MouseClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MouseClick
        //Vérifier si ce joueur a le droit à jouer
        if(!myturn) return;        
        else{
            //votre tour
            int x=evt.getX()/cellWidth;
            int y=evt.getY()/cellWidth;
            //vérifier si cette pointe est valide
            if(x>=0&&x<Size&&y>=0&&y<Size){
                if(table.makeMove(1, x, y)==1){
                    try {
                        //Envoyer le message sur le nouvelle position
                        socketOutput.writeObject("move:"+x+":"+y);
                        //Verifier s'il existe un gagnant
                        playerWin=table.checkWin();
                        jPanel1.repaint();
                        if(playerWin!=0){
                            String message;
                            if(playerWin==1){
                                message="You win";
                            }else{
                                message="You lost";
                            }
                            //Informer si quelqu'un gagne
                          JOptionPane.showMessageDialog(this, message);
                          if(timer!=null) timer.cancel();
                        }                                                
                    } catch (IOException ex) {                        
                        Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    jLabel1.setText("Status: Your friend turn");
                    myturn=false;
                    if(timer!=null) timer.cancel();
                }else{
                    //si cette position n'est pas valide
                    JOptionPane.showMessageDialog(this, "This position invalid");
                }
            }
        }
    }//GEN-LAST:event_MouseClick
//send message vers d'autre joueur
    private void sendMessage(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendMessage
        //vérifier si le textbox n'est pas vide
        if(!jTextField1.getText().equals("")){
            try {
                jEditorPane1.setText(jEditorPane1.getText() + "You : " + jTextField1.getText() + "\n");
                //envoyer le message vers d'autre utilisateur
                socketOutput.writeObject("chat:"+jTextField1.getText());
                jTextField1.setText("");
            } catch (IOException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_sendMessage

    private void enterText(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterText
        sendMessage(null);
    }//GEN-LAST:event_enterText

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        try {
            //informer d'autre utilisateur pour recommencer à jouer
            socketOutput.writeObject("playagain");
            //recréer un nouveau tableau
            table=new Table(Size, Size);
            jPanel1.repaint();
            //Changer le tour
            myturn=false;
            if(timer!=null)timer.cancel();
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server();
            }
        });
    }
    class ListenMessage extends Thread {
        public ListenMessage() {
            start();
        }
        @Override
        public void run() {
            messageManagement();
        }
    }
    //Timer
    private void timeCount(){
        timer=new Timer();
        //la valeur par défaut du timeout est 60 secondes
        timeOut=60;
        timer.scheduleAtFixedRate(new TimerTask() {
            public void run() {
                timeOut--;
                jLabel2.setText("Times rest:"+timeOut);
                //Verifier s'il n'a plus de temps, perdre votre tour
                if(timeOut==0){
                    myturn=false;
                    try {
                        //informer d'autre joueur si ce joueur perte son tour
                        socketOutput.writeObject("lostturn");
                        jLabel1.setText("Status: Your friend turn");
                    } catch (IOException ex) {
                        Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    timer.cancel();
                }
            }
        }, delay, period);        
    }
    public void messageManagement(){
        try {
            serverSocket=new ServerSocket(port);
            //Attendre le client
            socket=serverSocket.accept();
            //count down
            timeCount();
            jLabel1.setText("Status: Your turn");
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String message="";        
        try {
            //créer les objets pour envoyer et recevoir les message
            socketOutput = new ObjectOutputStream(socket.getOutputStream());
            socketInput = new ObjectInputStream(socket.getInputStream());
        } catch (IOException e) {
            System.out.println("Could not listen on port "+port);
            System.exit(-1);
        }
        //Attendre les messsage d'autre joueur
        while(true){            
            try {
                message=(String)socketInput.readObject();
            } catch (IOException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            }
            //si d'autre joueur pert son tour, ce joueur a le droit de jouer
            if(message.equals("lostturn")){
                myturn=true;
                jLabel1.setText("Status: Your turn");
                timeCount();
            //d'autre joueur demande de recommencer à jouer
            }else if(message.equals("playagain")){
                myturn=true;
                table=new Table(Size, Size);
                repaint();
                timeCount();
                jLabel1.setText("Status: Your turn");                
            }else{
                //d'autre joueur choisit une position
                String[] messageContent=message.split(":");
                if(messageContent[0].equals("chat")){
                    jEditorPane1.setText(jEditorPane1.getText() + "Your Friend : " + messageContent[1] + "\n");
                }else{
                    //mettre la nouvelle valeur dans la tableau
                    int x=Integer.parseInt(messageContent[1]);
                    int y=Integer.parseInt(messageContent[2]);
                    table.makeMove(2, x, y);
                    myturn=true;
                    jLabel1.setText("Status: Your turn");                                        
                    jPanel1.repaint();
                    //verifier si quelqu'un gagne
                    playerWin=table.checkWin();
                    if(playerWin!=0){
                        String messageInform;
                        if(playerWin==1){
                            messageInform="You win";
                        }else{
                            messageInform="You lost";
                        }
                        JOptionPane.showMessageDialog(this, messageInform);
                        if(timer!=null) timer.cancel();
                    }else{
                        timeCount();
                    }                    
                }
            }
        }        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
